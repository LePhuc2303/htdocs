// DEBUG: Test WebSocket connection
window.testConnection = function() {
    const ws = new WebSocket('ws://127.0.0.1:8080');
    ws.onopen = () => console.log('‚úÖ Connection test OK');
    ws.onerror = (e) => console.error('‚ùå Connection test failed:', e);
    ws.onmessage = (e) => console.log('üì® Test message:', e.data);
    
    setTimeout(() => {
        ws.send(JSON.stringify({type: 'test', message: 'hello'}));
    }, 1000);
};

// assets/js/flappy-race.js - Flappy Race Online Client (FIXED SYNTAX)
class FlappyRaceClient {
    constructor() {
        this.ws = null;
        this.gameId = null;
        this.playerId = null;
        this.playerColor = null;
        this.gameState = null;
        this.canvas = null;
        this.ctx = null;
        this.camera = { x: 0, y: 0 };
        this.keys = {};
        this.renderingStarted = false;
        
        // Game config
        this.config = {
            width: 1200,
            height: 600,
            raceDistance: 2000
        };
        
        // Game settings
        this.gameSettings = {
            mode: 'classic',
            maxPlayers: 4,
            difficulty: 'normal',
            mapType: 'classic',
            itemsEnabled: true
        };
        
        // Assets and animations
        this.particles = [];
        this.animations = [];
        
        this.init();


         setTimeout(() => {
        this.initializeUI();
    }, 100);
    }

    init() {
        this.setupCanvas();
        this.connectWebSocket();
        this.setupEventListeners();
        this.setupGameModeSelection();
        this.startRenderLoop();
    }

    setupGameModeSelection() {
        // Setup game mode cards
        document.querySelectorAll('.game-mode-card').forEach(card => {
            card.addEventListener('click', () => {
                // Remove selected class from all cards
                document.querySelectorAll('.game-mode-card').forEach(c => {
                    c.classList.remove('selected');
                });
                
                // Add selected class to clicked card
                card.classList.add('selected');
                
                // Update selected mode
                const mode = card.dataset.mode;
                this.gameSettings.mode = mode;
                
                // Show selected mode
                const selectedModeDiv = document.getElementById('selectedMode');
                const selectedModeNameSpan = document.getElementById('selectedModeName');
                
                if (selectedModeDiv && selectedModeNameSpan) {
                    selectedModeDiv.style.display = 'block';
                    selectedModeNameSpan.textContent = card.querySelector('h5').textContent;
                }
                
                // Update max players based on mode
                this.updateMaxPlayersForMode(mode);
            });
        });
        
        // Setup room settings
        const maxPlayersEl = document.getElementById('maxPlayers');
        const difficultyEl = document.getElementById('difficulty');
        const mapTypeEl = document.getElementById('mapType');
        const itemsEnabledEl = document.getElementById('itemsEnabled');
        
        if (maxPlayersEl) {
            maxPlayersEl.addEventListener('change', (e) => {
                this.gameSettings.maxPlayers = parseInt(e.target.value);
            });
        }
        
        if (difficultyEl) {
            difficultyEl.addEventListener('change', (e) => {
                this.gameSettings.difficulty = e.target.value;
            });
        }
        
        if (mapTypeEl) {
            mapTypeEl.addEventListener('change', (e) => {
                this.gameSettings.mapType = e.target.value;
            });
        }
        
        if (itemsEnabledEl) {
            itemsEnabledEl.addEventListener('change', (e) => {
                this.gameSettings.itemsEnabled = e.target.value === 'true';
            });
        }
    }

    updateMaxPlayersForMode(mode) {
        const maxPlayersSelect = document.getElementById('maxPlayers');
        if (!maxPlayersSelect) return;
        
        maxPlayersSelect.innerHTML = '';
        
        let options = [];
        switch (mode) {
            case 'classic':
                options = [2, 4, 6, 8];
                break;
            case 'battle':
                options = [4, 6, 8];
                break;
            case 'time':
                options = [1, 2, 4, 6, 8];
                break;
            case 'endless':
                options = [1, 2, 3, 4];
                break;
            default:
                options = [2, 4, 6, 8];
        }
        
        options.forEach(num => {
            const option = document.createElement('option');
            option.value = num;
            option.textContent = `${num} ng∆∞·ªùi`;
            if (num === 4) option.selected = true;
            maxPlayersSelect.appendChild(option);
        });
    }

    setupCanvas() {
        this.canvas = document.getElementById('flappyCanvas');
        if (!this.canvas) {
            console.error('Canvas element not found');
            return;
        }
        
        this.ctx = this.canvas.getContext('2d');
        this.resizeCanvas();
        
        window.addEventListener('resize', () => this.resizeCanvas());
    }

    resizeCanvas() {
        if (!this.canvas || !this.ctx) return;
        
        // Check if in fullscreen mode
        if (document.body.classList.contains('game-playing')) {
            this.resizeCanvasFullscreen();
            return;
        }
        
        // Normal mode - responsive canvas
        const container = this.canvas.parentElement;
        if (!container) return;
        
        const containerWidth = container.clientWidth - 40; // Account for padding
        const aspectRatio = this.config.width / this.config.height;
        
        this.canvas.width = Math.min(containerWidth, 1200);
        this.canvas.height = this.canvas.width / aspectRatio;
        
        // Ensure minimum height on mobile
        if (this.canvas.height < 250) {
            this.canvas.height = 250;
            this.canvas.width = 250 * aspectRatio;
        }
        
        // Scale factor for rendering
        this.scale = this.canvas.width / this.config.width;
        
        // Redraw if we have a game state
        if (this.gameState) {
            this.render();
        }
    }

    resizeCanvasFullscreen() {
        if (!this.canvas) return;
        
        // Set canvas to full screen dimensions
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
        
        // Update canvas style
        this.canvas.style.width = '100vw';
        this.canvas.style.height = '100vh';
        this.canvas.style.position = 'fixed';
        this.canvas.style.top = '0';
        this.canvas.style.left = '0';
        this.canvas.style.zIndex = '9998';
        
        // Scale factor to maintain game proportions
        const gameAspectRatio = this.config.width / this.config.height;
        const screenAspectRatio = window.innerWidth / window.innerHeight;
        
        if (screenAspectRatio > gameAspectRatio) {
            // Screen is wider than game - fit to height
            this.scale = window.innerHeight / this.config.height;
        } else {
            // Screen is taller than game - fit to width
            this.scale = window.innerWidth / this.config.width;
        }
        
        console.log('Canvas resized to fullscreen:', this.canvas.width, 'x', this.canvas.height, 'Scale:', this.scale);
    }

    connectWebSocket() {
    console.log('üîå Connecting to WebSocket server...');
    
    // ƒê√≥ng connection c≈© n·∫øu c√≥
    if (this.ws) {
        this.ws.close();
    }
    
    this.ws = new WebSocket('ws://localhost:8080');

    this.ws.onopen = () => {
        console.log('‚úÖ WebSocket connected successfully');
        this.updateConnectionStatus('connected', 'üü¢ ƒê√£ k·∫øt n·ªëi');
    };

    this.ws.onmessage = (event) => {
        try {
            const data = JSON.parse(event.data);
            this.handleMessage(data);
        } catch (e) {
            console.error('‚ùå Error parsing message:', e);
        }
    };

    this.ws.onclose = (event) => {
        console.log('‚ùå WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);
        this.updateConnectionStatus('disconnected', 'üî¥ M·∫•t k·∫øt n·ªëi - ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
        
        // Auto reconnect sau 3 gi√¢y
        setTimeout(() => {
            console.log('üîÑ Attempting to reconnect...');
            this.connectWebSocket();
        }, 3000);
    };

    this.ws.onerror = (error) => {
        console.error('‚ö†Ô∏è WebSocket error:', error);
        this.updateConnectionStatus('error', '‚ö†Ô∏è L·ªói k·∫øt n·ªëi - Ki·ªÉm tra server c√≥ ƒëang ch·∫°y kh√¥ng');
        this.handleConnectionError('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server game');
    };
}

    updateConnectionStatus(status, message) {
        const statusEl = document.getElementById('connectionStatus');
        if (statusEl) {
            statusEl.textContent = message;
            statusEl.className = `connection-status ${status} alert text-center`;
        }
    }

   handleMessage(data) {
    console.log('üì® Received message:', data.type, data);

    switch (data.type) {
        case 'error':
            console.error('‚ùå Server error:', data.message);
            if (data.message.includes('kh√¥ng t·ªìn t·∫°i')) {
                this.showError('‚ùå M√£ ph√≤ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ph√≤ng.');
                this.showMainMenu();
            } else if (data.message.includes('ƒë·∫ßy')) {
                this.showError('Ph√≤ng ƒë√£ ƒë·∫ßy ng∆∞·ªùi ch∆°i');
            } else {
                this.showError(data.message);
            }
            break;
            
        case 'playerInfo':
            this.playerId = data.playerId;
            console.log('üë§ Player ID assigned:', this.playerId);
            break;

case 'gameCreated':
    console.log('‚úÖ Game created successfully:', data);
    this.gameId = data.gameId;
    this.playerColor = data.playerInfo?.color;
    this.isHost = data.playerInfo?.isHost || true;
    this.isSpectator = false;
    
    if (data.playerInfo?.gameConfig) {
        this.config = { ...this.config, ...data.playerInfo.gameConfig };
    }
    
    // QUAN TR·ªåNG: Hi·ªÉn th·ªã lobby/setup section
    this.showGameSetupSection();
    
    // Update game info
    this.updateGameInfo();
    
    break;
case 'playerLeft':
    console.log('üëã Player left:', data);
    
    // C·∫≠p nh·∫≠t game state n·∫øu c√≥
    if (this.gameState && data.playerId) {
        // Remove player from players list
        this.gameState.players = this.gameState.players.filter(p => p.playerId !== data.playerId);
        
        // Remove from ready list
        if (this.gameState.playersReady) {
            delete this.gameState.playersReady[data.playerId];
        }
        
        // Update UI
        this.updatePlayersList();
        this.updateReadyStatus(this.gameState.playersReady || {});
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o
    if (data.playerId !== this.playerId) {
        this.showInfo(`üëã Ng∆∞·ªùi ch∆°i ${data.playerId.slice(-4)} ƒë√£ r·ªùi ph√≤ng`);
    }
    break;
 case 'gameJoined':
    console.log('‚úÖ Game joined successfully:', data);
    this.gameId = data.gameId;
    this.playerColor = data.playerInfo?.color;
    this.isHost = data.playerInfo?.isHost || false;
    this.isSpectator = data.playerInfo?.isSpectator || false;
    
    if (data.playerInfo?.gameConfig) {
        this.config = { ...this.config, ...data.playerInfo.gameConfig };
    }
    
    // QUAN TR·ªåNG: Hi·ªÉn th·ªã lobby/setup section
    this.showGameSetupSection();
    
    // Update game info
    this.updateGameInfo();
    
    break;
case 'roundFinished':
    console.log('üèÅ Round finished:', data);
    this.gameState.gamePhase = 'finished';
    
    // Exit fullscreen ƒë·ªÉ hi·ªÉn th·ªã UI
    this.exitFullscreenMode();
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ v√† n√∫t s·∫µn s√†ng
    this.showRoundResult(data);
    break;

case 'newRoundStarted':
    console.log('üîÑ New round started - entering game mode');
    
    // Reset UI v√† v√†o fullscreen
    this.resetReadyButton();
    this.showGamePlaying();
    break;

case 'readyUpdate':
    console.log('‚úÖ Ready status update:', data.playersReady);
    
    if (this.gameState) {
        this.gameState.playersReady = data.playersReady;
    }
    
    this.updateReadyStatus(data.playersReady);
    this.updatePlayersList();
    break;
     
case 'gameStarted':
    console.log('üéÆ Game started - entering fullscreen');
    this.showGamePlaying();
    break;

case 'gameState':
    console.log('üìä Game state update:', data);
    this.gameState = data;
    
    // DEBUG: Log players v√† ready status
    console.log('Players:', data.players);
    console.log('PlayerStates:', data.playerStates);
    console.log('PlayersReady:', data.playersReady);
    
    // ƒê·∫£m b·∫£o event listeners ho·∫°t ƒë·ªông
    if (!this.eventListenersActive) {
        console.log('üîß Re-setting up event listeners...');
        this.setupEventListeners();
        this.eventListenersActive = true;
    }
    
    // Update UI
    this.updateUI();
    break;
        // ===== TH√äM CASE M·ªöI ƒê·ªÇ X·ª¨ L√ù READY UPDATE =====
        case 'readyUpdate':
            console.log('‚úÖ Ready status update:', data.playersReady);
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i ready trong gameState
            if (this.gameState) {
                this.gameState.playersReady = data.playersReady;
            }
            
            // G·ªçi h√†m c·∫≠p nh·∫≠t UI
            this.updateReadyStatus(data.playersReady);
            this.updatePlayersList();
            break;

        case 'gameMessage':
            console.log('üí¨ Game message:', data.message);
            this.showSuccess(data.message);
            break;

        default:
            console.log('‚ùì Unknown message type:', data.type);
    }
}

    // THAY TH·∫æ FUNCTION setupEventListeners C≈® B·∫∞NG C√ÅI N√ÄY:

setupEventListeners() {
    // Key event handlers v·ªõi force exit
    this.keyDownHandler = (e) => {
        console.log('üîß Key pressed:', e.key, e.code);
        
        // FORCE EXIT - ESC key lu√¥n lu√¥n tho√°t
        if (e.key === 'Escape' || e.code === 'Escape') {
            e.preventDefault();
            e.stopPropagation();
            console.log('üö™ ESC pressed - Force exiting...');
            this.forceExitGame();
            return;
        }
        
        // Game controls ch·ªâ khi ƒëang playing
        if (this.gameState?.gamePhase === 'playing' && this.gameState?.status === 'playing') {
            if (e.code === 'Space') {
                e.preventDefault();
                this.flap();
            } else if (e.key >= '1' && e.key <= '4') {
                e.preventDefault();
                this.useItem(parseInt(e.key) - 1);
            }
        }
    };

    this.keyUpHandler = (e) => {
        // Kh√¥ng c·∫ßn x·ª≠ l√Ω keyup cho exit
    };

    // Remove existing listeners
    document.removeEventListener('keydown', this.keyDownHandler);
    document.removeEventListener('keyup', this.keyUpHandler);
    
    // Add new listeners
    document.addEventListener('keydown', this.keyDownHandler);
    document.addEventListener('keyup', this.keyUpHandler);
    
    // Touch controls for mobile
    if (this.canvas) {
        this.canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            if (this.gameState?.gamePhase === 'playing' && this.gameState?.status === 'playing') {
                this.flap();
            }
        }, { passive: false });

        this.canvas.addEventListener('click', (e) => {
            e.preventDefault();
            if (this.gameState?.gamePhase === 'playing' && this.gameState?.status === 'playing') {
                this.flap();
            }
        });
    }
    
    // Handle window resize
    window.addEventListener('resize', () => {
        this.resizeCanvas();
    });
    
    // TH√äM LISTENER CHO WINDOW BLUR (khi user chuy·ªÉn tab/window)
    window.addEventListener('blur', () => {
        console.log('üîÑ Window lost focus - pausing if needed');
    });
    
    console.log('‚úÖ Event listeners set up with force exit capability');
}

    startRenderLoop() {
        if (this.renderingStarted) return;
        this.renderingStarted = true;
        
        const render = () => {
            this.update();
            this.render();
            requestAnimationFrame(render);
        };
        render();
    }

forceExitGame() {
    console.log('üö® FORCE EXITING GAME...');
    
    try {
        // 1. Exit fullscreen mode immediately
        this.exitFullscreenMode();
        
        // 2. Send leave game message if connected
        if (this.ws && this.ws.readyState === WebSocket.OPEN && this.gameId) {
            console.log('üì§ Sending leave game message...');
            this.ws.send(JSON.stringify({
                type: 'leaveGame',
                gameId: this.gameId
            }));
        }
        
        // 3. Reset all game state
        this.gameId = null;
        this.playerColor = null;
        this.gameState = null;
        this.playerId = null;
        
        // 4. Force show main menu
        this.showMainMenu();
        
        // 5. Show success message
        this.showSuccess('üö™ ƒê√£ tho√°t game th√†nh c√¥ng!');
        
        console.log('‚úÖ Force exit completed successfully');
        
    } catch (error) {
        console.error('‚ùå Error during force exit:', error);
        // Fallback - reload page if all else fails
        if (confirm('C√≥ l·ªói khi tho√°t game. B·∫°n c√≥ mu·ªën reload trang?')) {
            window.location.reload();
        }
    }
}
    update() {
        if (!this.gameState) return;
        
        // Update camera to follow player
        const myPlayer = this.getMyPlayer();
        if (myPlayer) {
            this.camera.x = myPlayer.x - this.config.width / 2;
            this.camera.x = Math.max(0, Math.min(this.camera.x, this.config.raceDistance));
        }
        
        // Update particles and animations
        this.updateParticles();
        this.updateAnimations();
    }

    render() {
    if (!this.ctx || !this.canvas) {
        console.warn('Canvas or context not available for rendering');
        return;
    }
    
    this.ctx.save();
    
    // Clear canvas with sky blue background
    this.ctx.fillStyle = '#87CEEB';
    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Check if we have game state to render
    if (!this.gameState) {
        // Show waiting message
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = 'bold 24px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('ƒêang ch·ªù game...', this.canvas.width / 2, this.canvas.height / 2);
        this.ctx.restore();
        return;
    }
    
    // Scale for game rendering
    this.ctx.scale(this.scale || 1, this.scale || 1);
    
    // Apply camera transform
    this.ctx.translate(-this.camera.x, -this.camera.y);
    
    // Render background elements
    this.renderBackground();
    this.renderRaceTrack();
    this.renderPipes();
    this.renderItems();
    this.renderProjectiles();
    this.renderPlayers();
    this.renderParticles();
    
    // Reset transform for UI
    this.ctx.restore();
    
    // Render UI overlays (not affected by camera/scale)
    if (document.body.classList.contains('game-playing')) {
        this.renderFullscreenUI();
    } else {
        this.renderUI();
    }
}

   renderFullscreenUI() {
    if (!this.gameState) return;
    
    this.ctx.save();
    
    // ===== COUNTDOWN/PHASE INDICATOR (TOP CENTER) - ƒê√É CH·ªàNH ƒê·∫∏P H·ªûN =====
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
    this.ctx.fillRect(this.canvas.width / 2 - 200, 15, 400, 60);
    
    // Vi·ªÅn ƒë·∫πp cho countdown box
    this.ctx.strokeStyle = '#FFD700';
    this.ctx.lineWidth = 3;
    this.ctx.strokeRect(this.canvas.width / 2 - 200, 15, 400, 60);
    
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = 'bold 24px Arial';
    this.ctx.textAlign = 'center';
    
    // Show countdown timer or game phase
    if (this.gameState.gamePhase === 'countdown') {
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 28px Arial';
        this.ctx.fillText(`üöÄ B·∫ÆT ƒê·∫¶U SAU: ${Math.ceil(this.gameState.gameTimer)}`, this.canvas.width / 2, 50);
    } else {
        this.ctx.fillText(`üéÆ Phase: ${this.gameState.gamePhase?.toUpperCase() || 'PLAYING'}`, this.canvas.width / 2, 50);
    }
    
    // ===== PLAYER STATS (TOP LEFT) =====
    const myPlayer = this.getMyPlayer();
    if (myPlayer) {
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        this.ctx.fillRect(20, 20, 200, 140);
        
        // Vi·ªÅn cho stats box
        this.ctx.strokeStyle = '#4ECDC4';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(20, 20, 200, 140);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = 'bold 16px Arial';
        this.ctx.textAlign = 'left';
        this.ctx.fillText('üìä Your Stats:', 30, 45);
        this.ctx.font = '14px Arial';
        this.ctx.fillText(`üí∞ Score: ${myPlayer.score || 0}`, 30, 65);
        this.ctx.fillText(`üèÉ Phase: ${myPlayer.phase || 'outbound'}`, 30, 85);
        this.ctx.fillText(`‚ù§Ô∏è Lives: ${myPlayer.lives || 3}`, 30, 105);
        
        // Show alive/dead status
        if (!myPlayer.alive) {
            this.ctx.fillStyle = '#FF4444';
            this.ctx.font = 'bold 14px Arial';
            this.ctx.fillText('üíÄ DEAD', 30, 125);
            this.ctx.fillStyle = '#FFFF00';
            this.ctx.font = '12px Arial';
            this.ctx.fillText('Wait for respawn...', 30, 145);
        } else if (myPlayer.rank > 0) {
            this.ctx.fillStyle = '#FFD700';
            this.ctx.fillText(`üèÜ Rank: ${myPlayer.rank}`, 30, 125);
        }
    }
    
    // ===== LEADERBOARD (TOP RIGHT) - DI CHUY·ªÇN XU·ªêNG D∆Ø·ªöI N√öT THO√ÅT =====
    if (this.gameState.leaderboard && this.gameState.leaderboard.length > 0) {
        const boardWidth = 200;
        const boardHeight = Math.min(this.gameState.leaderboard.length * 25 + 50, 200);
        
        // DI CHUY·ªÇN XU·ªêNG D∆Ø·ªöI N√öT THO√ÅT (N√öT THO√ÅT ·ªû Y=20, CAO 50PX)
        const leaderboardY = 90; // Thay v√¨ 20, ƒë·∫∑t ·ªü 90 ƒë·ªÉ tr√°nh che n√∫t tho√°t
        
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
        this.ctx.fillRect(this.canvas.width - boardWidth - 20, leaderboardY, boardWidth, boardHeight);
        
        // Vi·ªÅn ƒë·∫πp cho leaderboard
        this.ctx.strokeStyle = '#FF6B6B';
        this.ctx.lineWidth = 2;
        this.ctx.strokeRect(this.canvas.width - boardWidth - 20, leaderboardY, boardWidth, boardHeight);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = 'bold 16px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üèÜ Leaderboard', this.canvas.width - boardWidth / 2 - 20, leaderboardY + 25);
        
        this.ctx.font = '12px Arial';
        this.ctx.textAlign = 'left';
        this.gameState.leaderboard.slice(0, 6).forEach((entry, index) => {
            const y = leaderboardY + 45 + index * 20;
            const isMe = entry.playerId === this.playerId;
            this.ctx.fillStyle = isMe ? '#FFD700' : '#FFFFFF';
            
            // Hi·ªÉn th·ªã th√¥ng tin ƒë·∫ßy ƒë·ªß
            this.ctx.fillText(`${index + 1}. P${entry.playerId.slice(-2)} - ${entry.score || 0}`, 
                             this.canvas.width - boardWidth + 10, y);
        });
    }
    
    // ===== INSTRUCTIONS (BOTTOM CENTER) =====
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
    this.ctx.fillRect(this.canvas.width / 2 - 300, this.canvas.height - 80, 600, 60);
    
    // Vi·ªÅn cho instructions
    this.ctx.strokeStyle = '#9B59B6';
    this.ctx.lineWidth = 2;
    this.ctx.strokeRect(this.canvas.width / 2 - 300, this.canvas.height - 80, 600, 60);
    
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = 'bold 14px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.fillText('üéÆ SPACE/Click: Flap  |  1-4: Use Items  |  ESC: Exit Fullscreen', this.canvas.width / 2, this.canvas.height - 50);
    
    // ===== RESPAWN MESSAGE (CH·ªà KHI ROUND FINISHED) =====
    if (this.gameState.gamePhase === 'finished') {
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.9)';
        this.ctx.fillRect(this.canvas.width / 2 - 200, this.canvas.height / 2 - 50, 400, 100);
        
        // Vi·ªÅn cho respawn message
        this.ctx.strokeStyle = '#E74C3C';
        this.ctx.lineWidth = 3;
        this.ctx.strokeRect(this.canvas.width / 2 - 200, this.canvas.height / 2 - 50, 400, 100);
        
        this.ctx.fillStyle = '#FFD700';
        this.ctx.font = 'bold 24px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üèÅ ROUND K·∫æT TH√öC!', this.canvas.width / 2, this.canvas.height / 2 - 10);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = '16px Arial';
        this.ctx.fillText('Nh·∫•n ESC ƒë·ªÉ v·ªÅ lobby ho·∫∑c ch·ªù respawn', this.canvas.width / 2, this.canvas.height / 2 + 20);
    }
    
    this.ctx.restore();
}

    renderBackground() {
        // Render clouds and background elements
        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
        for (let i = 0; i < 10; i++) {
            const x = i * 300 + (Date.now() * 0.01) % 300;
            const y = 50 + Math.sin(i) * 30;
            this.renderCloud(x, y);
        }
    }

    renderCloud(x, y) {
        this.ctx.beginPath();
        this.ctx.arc(x, y, 20, 0, Math.PI * 2);
        this.ctx.arc(x + 15, y, 25, 0, Math.PI * 2);
        this.ctx.arc(x + 30, y, 20, 0, Math.PI * 2);
        this.ctx.fill();
    }
renderRaceTrack() {
    // Start line
    this.ctx.strokeStyle = '#FF6B6B';
    this.ctx.lineWidth = 3;
    this.ctx.setLineDash([10, 10]);
    this.ctx.beginPath();
    this.ctx.moveTo(100, 0);
    this.ctx.lineTo(100, this.config.height);
    this.ctx.stroke();
    
    // Finish line
    this.ctx.strokeStyle = '#4ECDC4';
    this.ctx.beginPath();
    this.ctx.moveTo(this.config.raceDistance, 0);
    this.ctx.lineTo(this.config.raceDistance, this.config.height);
    this.ctx.stroke();
    
    // ===== ƒê∆Ø·ªúNG D·∫™N CHO 2 PATH - M·ªú H∆†N ƒê·ªÇ KH√îNG CH√ìI M·∫ÆT =====
    this.ctx.setLineDash([10, 15]);
    this.ctx.lineWidth = 1;
    
    // ƒê∆∞·ªùng path tr√™n (m·ªù h∆°n)
    this.ctx.strokeStyle = 'rgba(255, 255, 0, 0.3)';
    this.ctx.beginPath();
    this.ctx.moveTo(100, this.config.height * 0.3);
    this.ctx.lineTo(this.config.raceDistance, this.config.height * 0.3);
    this.ctx.stroke();
    
    // ƒê∆∞·ªùng path d∆∞·ªõi (m·ªù h∆°n)
    this.ctx.strokeStyle = 'rgba(0, 255, 255, 0.3)';
    this.ctx.beginPath();
    this.ctx.moveTo(100, this.config.height * 0.7);
    this.ctx.lineTo(this.config.raceDistance, this.config.height * 0.7);
    this.ctx.stroke();
    
    this.ctx.setLineDash([]);
}
showRoundResult(data) {
    console.log('üìä Showing round result');
    
    // Hi·ªÉn th·ªã game setup ƒë·ªÉ c√≥ n√∫t s·∫µn s√†ng
    const mainMenu = document.getElementById('mainMenu');
    const gameSetup = document.getElementById('gameSetup');
    const gameSection = document.getElementById('gameSection');
    
    if (mainMenu) mainMenu.classList.add('hidden');
    if (gameSetup) gameSetup.classList.remove('hidden');
    if (gameSection) gameSection.classList.remove('hidden');
    
    // ƒê·∫£m b·∫£o canvas v·∫´n hi·ªÉn th·ªã
    this.ensureCanvasVisible();
    
    // C·∫≠p nh·∫≠t title
    const lobbyTitle = document.querySelector('#gameSetup .card-header h4');
    if (lobbyTitle) {
        if (data.winner) {
            lobbyTitle.textContent = `üèÜ P${data.winner.slice(-2)} th·∫Øng round! S·∫µn s√†ng round m·ªõi?`;
        } else {
            lobbyTitle.textContent = 'üèÅ Round k·∫øt th√∫c! S·∫µn s√†ng round m·ªõi?';
        }
    }
    
    // Enable n√∫t s·∫µn s√†ng
    const readyBtn = document.getElementById('readyBtn');
    if (readyBtn) {
        readyBtn.disabled = false;
        readyBtn.textContent = 'üîÑ S·∫µn s√†ng round m·ªõi!';
        readyBtn.className = 'btn btn-success btn-lg px-5';
        readyBtn.style.display = 'inline-block';
    }
    
    // Reset ready status
    const readyStatus = document.getElementById('readyStatus');
    if (readyStatus) {
        readyStatus.innerHTML = '<span class="not-ready-status">‚è≥ Ch·ªù t·∫•t c·∫£ ng∆∞·ªùi ch∆°i s·∫µn s√†ng...</span>';
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o
    this.showSuccess(data.winner ? 
        `üèÜ Player ${data.winner.slice(-2)} th·∫Øng round n√†y!` : 
        'üèÅ Round k·∫øt th√∫c! S·∫µn s√†ng cho round m·ªõi?');
}
renderPipes() {
    if (!this.gameState.pipes) return;
    
    this.ctx.fillStyle = '#228B22';
    this.ctx.strokeStyle = '#006400';
    this.ctx.lineWidth = 2;
    
    this.gameState.pipes.forEach((pipe) => {
        // ===== V·∫º 3 PH·∫¶N ·ªêNG S·∫†CH S·∫º =====
        
        // 1. ·ªêng tr√™n c√πng
        if (pipe.topHeight > 0) {
            this.ctx.fillRect(pipe.x, 0, 60, pipe.topHeight);
            this.ctx.strokeRect(pipe.x, 0, 60, pipe.topHeight);
            
            // Th√™m cap cho ·ªëng tr√™n
            this.ctx.fillRect(pipe.x - 5, pipe.topHeight - 10, 70, 10);
            this.ctx.strokeRect(pipe.x - 5, pipe.topHeight - 10, 70, 10);
        }
        
        // 2. ·ªêng gi·ªØa (gi·ªØa 2 kho·∫£ng tr·ªëng)
        if (pipe.middleHeight > 0) {
            this.ctx.fillRect(pipe.x, pipe.middleY, 60, pipe.middleHeight);
            this.ctx.strokeRect(pipe.x, pipe.middleY, 60, pipe.middleHeight);
            
            // Th√™m cap tr√™n v√† d∆∞·ªõi cho ·ªëng gi·ªØa
            this.ctx.fillRect(pipe.x - 5, pipe.middleY - 5, 70, 10);
            this.ctx.strokeRect(pipe.x - 5, pipe.middleY - 5, 70, 10);
            
            this.ctx.fillRect(pipe.x - 5, pipe.middleY + pipe.middleHeight - 5, 70, 10);
            this.ctx.strokeRect(pipe.x - 5, pipe.middleY + pipe.middleHeight - 5, 70, 10);
        }
        
        // 3. ·ªêng d∆∞·ªõi c√πng
        if (pipe.bottomHeight > 0) {
            this.ctx.fillRect(pipe.x, pipe.bottomY, 60, pipe.bottomHeight);
            this.ctx.strokeRect(pipe.x, pipe.bottomY, 60, pipe.bottomHeight);
            
            // Th√™m cap cho ·ªëng d∆∞·ªõi
            this.ctx.fillRect(pipe.x - 5, pipe.bottomY, 70, 10);
            this.ctx.strokeRect(pipe.x - 5, pipe.bottomY, 70, 10);
        }
        
        // ===== B·ªé PH·∫¶N HI·ªÇN TH·ªä S·ªê DEBUG =====
        // Kh√¥ng c√≤n hi·ªÉn th·ªã s·ªë 1, 2 n·ªØa
    });
}

    renderItems() {
        if (!this.gameState.items) return;
        
        this.gameState.items.forEach(item => {
            this.renderItem(item);
        });
    }

    renderItem(item) {
        const x = item.x;
        const y = item.y;
        const pulse = Math.sin(Date.now() * 0.01) * 0.1 + 1;
        
        this.ctx.save();
        this.ctx.translate(x, y);
        this.ctx.scale(pulse, pulse);
        
        switch (item.type) {
            case 'speed':
                this.ctx.fillStyle = '#FFD700';
                this.ctx.beginPath();
                this.ctx.moveTo(-10, 0);
                this.ctx.lineTo(10, -5);
                this.ctx.lineTo(10, 5);
                this.ctx.closePath();
                this.ctx.fill();
                break;
                
            case 'shield':
                this.ctx.fillStyle = '#4169E1';
                this.ctx.beginPath();
                this.ctx.arc(0, 0, 12, 0, Math.PI * 2);
                this.ctx.fill();
                this.ctx.strokeStyle = '#FFFFFF';
                this.ctx.lineWidth = 2;
                this.ctx.stroke();
                break;
                
            case 'bomb':
                this.ctx.fillStyle = '#FF4500';
                this.ctx.beginPath();
                this.ctx.arc(0, 0, 10, 0, Math.PI * 2);
                this.ctx.fill();
                this.ctx.fillStyle = '#FFFFFF';
                this.ctx.fillRect(-2, -8, 4, 4);
                break;
                
            case 'trap':
                this.ctx.fillStyle = '#8B4513';
                this.ctx.fillRect(-8, -8, 16, 16);
                this.ctx.fillStyle = '#FFD700';
                this.ctx.fillRect(-6, -6, 12, 12);
                break;
        }
        
        this.ctx.restore();
    }

    renderProjectiles() {
        if (!this.gameState.projectiles) return;
        
        this.gameState.projectiles.forEach(proj => {
            this.ctx.fillStyle = '#FF4500';
            this.ctx.beginPath();
            this.ctx.arc(proj.x, proj.y, 8, 0, Math.PI * 2);
            this.ctx.fill();
            
            // Add trail effect
            this.ctx.strokeStyle = '#FF6B6B';
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.moveTo(proj.x - proj.velocityX * 2, proj.y);
            this.ctx.lineTo(proj.x, proj.y);
            this.ctx.stroke();
        });
    }

    renderPlayers() {
        if (!this.gameState.playerStates) return;
        
        this.gameState.playerStates.forEach(player => {
            this.renderPlayer(player);
        });
    }

    // ===== THAY TH·∫æ H√ÄM renderPlayer(player) TRONG assets/js/flappy-race.js =====
renderPlayer(player) {
    const x = player.x;
    const y = player.y;
    const isMe = player.playerId === this.playerId;
    
    this.ctx.save();
    this.ctx.translate(x, y);
    
    // ===== HI·ªÇN TH·ªä TR·∫†NG TH√ÅI B·∫§T T·ª¨ =====
    if (player.invulnerable) {
        // Nh·∫•p nh√°y effect cho b·∫•t t·ª≠
        const blinkRate = Math.sin(Date.now() * 0.01) > 0;
        if (!blinkRate) {
            this.ctx.globalAlpha = 0.5;
        }
        
        // V√≤ng tr√≤n b·∫£o v·ªá
        this.ctx.strokeStyle = '#00FF00';
        this.ctx.lineWidth = 3;
        this.ctx.setLineDash([5, 5]);
        this.ctx.beginPath();
        this.ctx.arc(0, 0, 30, 0, Math.PI * 2);
        this.ctx.stroke();
        this.ctx.setLineDash([]);
        
        // Countdown timer
        if (player.invulnerableTime > 0) {
            this.ctx.fillStyle = '#00FF00';
            this.ctx.font = 'bold 10px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText(`${Math.ceil(player.invulnerableTime)}s`, 0, -35);
        }
    }
    
    // Glow effect cho player c·ªßa m√¨nh
    if (isMe) {
        this.ctx.shadowColor = player.color || '#FFD700';
        this.ctx.shadowBlur = 15;
        this.ctx.shadowOffsetX = 0;
        this.ctx.shadowOffsetY = 0;
    }
    
    // Dead players
    if (!player.alive) {
        this.ctx.globalAlpha = 0.5;
        if (Math.random() < 0.1) {
            this.addParticle(x, y, '#FF0000', 20);
        }
    }
    
    // Shield effect
    if (player.effects && player.effects.shield) {
        this.ctx.strokeStyle = '#4169E1';
        this.ctx.lineWidth = 3;
        this.ctx.setLineDash([5, 5]);
        this.ctx.beginPath();
        this.ctx.arc(0, 0, 25, 0, Math.PI * 2);
        this.ctx.stroke();
        this.ctx.setLineDash([]);
    }
    
    // Speed effect trail
    if (player.effects && player.effects.speed) {
        this.ctx.strokeStyle = '#FFD700';
        this.ctx.lineWidth = 2;
        for (let i = 0; i < 3; i++) {
            this.ctx.beginPath();
            this.ctx.moveTo(-20 - i * 5, -5 + i * 2);
            this.ctx.lineTo(-10 - i * 5, -5 + i * 2);
            this.ctx.stroke();
        }
    }
    
    // Player body (bird)
    this.ctx.fillStyle = player.color || '#FFD700';
    this.ctx.strokeStyle = '#333';
    this.ctx.lineWidth = 2;
    
    // Body
    this.ctx.beginPath();
    this.ctx.ellipse(0, 0, 15, 12, 0, 0, Math.PI * 2);
    this.ctx.fill();
    this.ctx.stroke();
    
    // Wing animation
    const wingFlap = Math.sin(Date.now() * 0.02 + (player.playerId ? player.playerId.charCodeAt(0) : 0)) * 0.3;
    this.ctx.fillStyle = this.lightenColor(player.color || '#FFD700', 20);
    this.ctx.beginPath();
    this.ctx.ellipse(-5, wingFlap, 8, 6, wingFlap, 0, Math.PI * 2);
    this.ctx.fill();
    this.ctx.stroke();
    
    // Eye
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.beginPath();
    this.ctx.arc(5, -3, 4, 0, Math.PI * 2);
    this.ctx.fill();
    this.ctx.fillStyle = '#000';
    this.ctx.beginPath();
    this.ctx.arc(6, -3, 2, 0, Math.PI * 2);
    this.ctx.fill();
    
    // Beak
    this.ctx.fillStyle = '#FFA500';
    this.ctx.beginPath();
    this.ctx.moveTo(12, -1);
    this.ctx.lineTo(20, 0);
    this.ctx.lineTo(12, 1);
    this.ctx.closePath();
    this.ctx.fill();
    
    // Player name
    this.ctx.fillStyle = isMe ? '#FFD700' : '#FFF';
    this.ctx.font = isMe ? 'bold 12px Arial' : '12px Arial';
    this.ctx.textAlign = 'center';
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 2;
    const playerName = isMe ? 'YOU' : `P${player.playerId ? player.playerId.slice(-2) : '??'}`;
    this.ctx.strokeText(playerName, 0, -25);
    this.ctx.fillText(playerName, 0, -25);
    
    // Score
    this.ctx.fillStyle = '#FFD700';
    this.ctx.font = 'bold 10px Arial';
    this.ctx.strokeStyle = '#000';
    this.ctx.lineWidth = 1;
    this.ctx.strokeText(player.score || 0, 0, 35);
    this.ctx.fillText(player.score || 0, 0, 35);
    
    // Phase indicator
    if (player.phase === 'return') {
        this.ctx.fillStyle = '#4ECDC4';
        this.ctx.font = 'bold 8px Arial';
        this.ctx.fillText('RETURN', 0, 45);
    } else if (player.phase === 'finished') {
        this.ctx.fillStyle = '#FF6B6B';
        this.ctx.font = 'bold 8px Arial';
        this.ctx.fillText(`RANK ${player.rank}`, 0, 45);
    }
    
    this.ctx.restore();
}

// ===== TH√äM H√ÄM HELPER lightenColor N√ÅT CH∆ØA C√ì =====
lightenColor(color, percent) {
    const num = parseInt(color.replace("#", ""), 16);
    const amt = Math.round(2.55 * percent);
    const R = (num >> 16) + amt;
    const G = (num >> 8 & 0x00FF) + amt;
    const B = (num & 0x0000FF) + amt;
    return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
        (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
        (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
}

    renderParticles() {
        this.particles.forEach((particle, index) => {
            this.ctx.save();
            this.ctx.globalAlpha = particle.alpha;
            this.ctx.fillStyle = particle.color;
            this.ctx.beginPath();
            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            this.ctx.fill();
            this.ctx.restore();
        });
    }

   renderUI() {
    if (!this.gameState) return;
    
    this.ctx.save();
    
    // Game phase indicator
    this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
    this.ctx.fillRect(10, 10, 200, 40);
    this.ctx.fillStyle = '#FFFFFF';
    this.ctx.font = 'bold 16px Arial';
    this.ctx.textAlign = 'left';
    this.ctx.fillText(`Phase: ${this.gameState.gamePhase?.toUpperCase() || 'WAITING'}`, 20, 35);
    
    // My player stats
    const myPlayer = this.getMyPlayer();
    if (myPlayer) {
        this.renderPlayerStats(myPlayer);
    }
    
    this.ctx.restore();
}

    renderPlayerStats(player) {
        const startY = 60;
        
        this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';
        this.ctx.fillRect(10, startY, 200, 120);
        
        this.ctx.fillStyle = '#FFFFFF';
        this.ctx.font = 'bold 14px Arial';
        this.ctx.textAlign = 'left';
        this.ctx.fillText('Your Stats:', 20, startY + 20);
        
        this.ctx.font = '12px Arial';
        this.ctx.fillText(`Score: ${player.score || 0}`, 20, startY + 40);
        this.ctx.fillText(`Phase: ${player.phase || 'outbound'}`, 20, startY + 55);
        this.ctx.fillText(`Lives: ${player.lives || 3}`, 20, startY + 70);
        
        if (player.rank > 0) {
            this.ctx.fillStyle = '#FFD700';
            this.ctx.fillText(`Final Rank: ${player.rank}`, 20, startY + 85);
        }
        
        // Progress bar
        const progress = Math.min(1, (player.x || 0) / this.config.raceDistance);
        const barWidth = 160;
        const barHeight = 10;
        const barX = 20;
        const barY = startY + 95;
        
        this.ctx.fillStyle = '#333';
        this.ctx.fillRect(barX, barY, barWidth, barHeight);
        this.ctx.fillStyle = player.phase === 'return' ? '#4ECDC4' : '#FFD700';
        this.ctx.fillRect(barX, barY, barWidth * progress, barHeight);
    }

    updateParticles() {
        for (let i = this.particles.length - 1; i >= 0; i--) {
            const particle = this.particles[i];
            particle.x += particle.vx;
            particle.y += particle.vy;
            particle.alpha -= 0.02;
            particle.size *= 0.99;
            
            if (particle.alpha <= 0 || particle.size <= 0.5) {
                this.particles.splice(i, 1);
            }
        }
    }

    updateAnimations() {
        // Update any animations here
    }

    addParticle(x, y, color, count = 5) {
        for (let i = 0; i < count; i++) {
            this.particles.push({
                x: x + (Math.random() - 0.5) * 20,
                y: y + (Math.random() - 0.5) * 20,
                vx: (Math.random() - 0.5) * 4,
                vy: (Math.random() - 0.5) * 4,
                size: 2 + Math.random() * 4,
                alpha: 1,
                color: color
            });
        }
    }

    // Helper functions
    getMyPlayer() {
        if (!this.gameState?.playerStates) return null;
        return this.gameState.playerStates.find(p => p.playerId === this.playerId);
    }

    getItemColor(itemType) {
        const colors = {
            speed: '#FFD700',
            shield: '#4169E1',
            bomb: '#FF4500',
            trap: '#8B4513'
        };
        return colors[itemType] || '#666';
    }

    getItemIcon(itemType) {
        const icons = {
            speed: '‚ö°',
            shield: 'üõ°',
            bomb: 'üí£',
            trap: 'üï≥'
        };
        return icons[itemType] || '?';
    }

    lightenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) + amt;
        const G = (num >> 8 & 0x00FF) + amt;
        const B = (num & 0x0000FF) + amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }

    // Game actions
flap() {
    // KH√îNG CHO PH√âP FLAP TRONG COUNTDOWN
    if (!this.gameId || this.gameState?.status !== 'playing') {
        console.log('Flapping disabled - game not playing. Status:', this.gameState?.status);
        return;
    }
    
    if (this.gameState?.gamePhase === 'countdown') {
        console.log('Flapping disabled - countdown phase');
        return;
    }
    
    if (this.gameState?.gamePhase !== 'playing') {
        console.log('Flapping disabled - not in playing phase. Current phase:', this.gameState?.gamePhase);
        return;
    }
    
    // Check if player is alive
    const myPlayer = this.getMyPlayer();
    if (!myPlayer || !myPlayer.alive) {
        console.log('Flapping disabled - player is dead');
        return;
    }
    
    this.ws.send(JSON.stringify({
        type: 'gameAction',
        gameId: this.gameId,
        action: 'flap'
    }));
    
    // Add flap particles for immediate feedback
    if (myPlayer) {
        this.addParticle(myPlayer.x || 0, myPlayer.y || 0, myPlayer.color || '#FFD700', 3);
    }
}

    useItem(itemType) {
        if (!this.gameId || this.gameState?.status !== 'playing') return;
        
        this.ws.send(JSON.stringify({
            type: 'gameAction',
            gameId: this.gameId,
            action: 'useItem',
            data: { itemType }
        }));
    }



// showCountdownOverlay(seconds) {
//     console.log('Showing countdown:', seconds);
    
//     // Remove existing overlay
//     const existingOverlay = document.getElementById('countdown-overlay');
//     if (existingOverlay) {
//         existingOverlay.remove();
//     }
    
//     // Create countdown overlay - KH√îNG ƒêEN N·ªÄN
//     const overlay = document.createElement('div');
//     overlay.id = 'countdown-overlay';
//     overlay.style.cssText = `
//         position: fixed;
//         top: 0;
//         left: 0;
//         width: 100vw;
//         height: 100vh;
//         background: transparent;
//         display: flex;
//         align-items: center;
//         justify-content: center;
//         z-index: 10000;
//         pointer-events: none;
//     `;
    
//     // Create countdown content with semi-transparent background
//     const content = document.createElement('div');
//     content.style.cssText = `
//         text-align: center;
//         color: #FFD700;
//         font-size: 120px;
//         font-weight: bold;
//         text-shadow: 0 0 20px #FFD700, 0 0 40px #FFD700, 0 0 60px #FFD700;
//         background: rgba(0, 0, 0, 0.3);
//         padding: 40px 60px;
//         border-radius: 20px;
//         border: 3px solid rgba(255, 215, 0, 0.5);
//         backdrop-filter: blur(5px);
//         animation: pulse 0.8s ease-in-out infinite alternate;
//     `;
    
//     content.innerHTML = `
//         <div style="font-size: 150px; margin-bottom: 10px;">${seconds}</div>
//         <div style="font-size: 24px; color: white; margin-bottom: 10px;">üöÄ Game b·∫Øt ƒë·∫ßu sau...</div>
//         <div style="font-size: 16px; color: #CCCCCC;">Nh·∫•n SPACE ho·∫∑c click ƒë·ªÉ bay l√™n</div>
//     `;
    
//     overlay.appendChild(content);
//     document.body.appendChild(overlay);
//         setTimeout(() => {
//         const stillExists = document.getElementById('countdown-overlay');
//         if (stillExists) {
//             console.log('üîß Fallback: Force hiding countdown after 12s');
//             this.hideCountdownOverlay();
//         }
//     }, 12000);
//     // Add CSS animation if not exists
//     if (!document.querySelector('#countdown-pulse-style')) {
//         const style = document.createElement('style');
//         style.id = 'countdown-pulse-style';
//         style.textContent = `
//             @keyframes pulse {
//                 from { transform: scale(1); }
//                 to { transform: scale(1.05); }
//             }
//         `;
//         document.head.appendChild(style);
//     }
// }
// updateCountdownOverlay(seconds) {
//     console.log('üîÑ Updating countdown to:', seconds);
    
//     const overlay = document.getElementById('countdown-overlay');
//     if (overlay) {
//         const content = overlay.querySelector('div');
//         if (content) {
//             content.innerHTML = `
//                 <div style="font-size: 150px; margin-bottom: 10px;">${seconds}</div>
//                 <div style="font-size: 24px; color: white; margin-bottom: 10px;">üöÄ Game b·∫Øt ƒë·∫ßu sau...</div>
//                 <div style="font-size: 16px; color: #CCCCCC;">Nh·∫•n SPACE ho·∫∑c click ƒë·ªÉ bay l√™n</div>
//             `;
            
//             // N·∫øu countdown = 0 th√¨ ·∫©n lu√¥n
//             if (seconds <= 0) {
//                 console.log('‚è∞ Countdown reached 0, hiding overlay');
//                 this.hideCountdownOverlay();
//             }
//         }
//     } else {
//         console.log('‚ö†Ô∏è No overlay found to update, creating new one');
//         this.showCountdownOverlay(seconds);
//     }
// }


// hideCountdownOverlay() {
//     console.log('üéØ Hiding countdown overlay');
    
//     const overlay = document.getElementById('countdown-overlay');
//     if (overlay) {
//         console.log('‚úÖ Found countdown overlay, removing...');
        
//         // Add fade out animation
//         overlay.style.transition = 'opacity 0.5s ease-out';
//         overlay.style.opacity = '0';
        
//         // Remove after animation
//         setTimeout(() => {
//             if (overlay && overlay.parentNode) {
//                 overlay.remove();
//                 console.log('‚úÖ Countdown overlay removed');
//             }
//         }, 500);
//     } else {
//         console.log('‚ö†Ô∏è No countdown overlay found to hide');
//     }
// }








ensureLobbyVisible() {
    console.log('üìã Ensuring lobby is visible...');
    
    const gameSetup = document.getElementById('gameSetup');
    const gameSection = document.getElementById('gameSection');
    
    // Hi·ªÉn th·ªã lobby
    if (gameSetup) {
        gameSetup.style.display = 'block';
        gameSetup.classList.remove('hidden');
    }
    
    // Hi·ªÉn th·ªã game section cho canvas v√† UI
    if (gameSection) {
        gameSection.style.display = 'block';
        gameSection.classList.remove('hidden');
    }
    
    // Hi·ªÉn th·ªã lobby elements
    this.showLobbyElements();
    
    console.log('‚úÖ Lobby visibility ensured');
}

forceRespawnPlayer() {
    if (!this.gameState || !this.gameId) return;
    
    this.ws.send(JSON.stringify({
        type: 'gameAction',
        gameId: this.gameId,
        action: 'forceRespawn'
    }));
}
    // UI event handlers
createGame() {
    console.log('üÜï Creating new game...');
    
    // ƒê·∫£m b·∫£o canvas hi·ªÉn th·ªã tr∆∞·ªõc khi t·∫°o game
    this.ensureCanvasVisible();
    
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(JSON.stringify({
            type: 'createGame',
            gameType: 'flappy-race'
        }));
    } else {
        this.showError('‚ùå Ch∆∞a k·∫øt n·ªëi t·ªõi server!');
    }
}

joinGame() {
    const gameIdInput = document.getElementById('joinGameId');
    const gameId = gameIdInput ? gameIdInput.value.trim() : '';
    
    if (!gameId) {
        this.showError('‚ùå Vui l√≤ng nh·∫≠p m√£ ph√≤ng!');
        return;
    }
    
    console.log('üö™ Joining game:', gameId);
    
    // ƒê·∫£m b·∫£o canvas hi·ªÉn th·ªã tr∆∞·ªõc khi join
    this.ensureCanvasVisible();
    
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        this.ws.send(JSON.stringify({
            type: 'joinGame',
            gameId: gameId
        }));
    } else {
        this.showError('‚ùå Ch∆∞a k·∫øt n·ªëi t·ªõi server!');
    }
}
initializeUI() {
    console.log('üîß Initializing UI...');
    
    // ƒê·∫£m b·∫£o canvas hi·ªÉn th·ªã ngay t·ª´ ƒë·∫ßu
    this.ensureCanvasVisible();
    
    // Set up event listeners
    this.setupEventListeners();
    
    console.log('‚úÖ UI initialized');
}
handleConnectionError(message) {
    console.error('Connection error:', message);
    this.showError(message);
    
    // Th·ª≠ k·∫øt n·ªëi l·∫°i
    setTimeout(() => {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            console.log('üîÑ Auto-reconnecting...');
            this.connectWebSocket();
        }
    }, 2000);
}


    showQuickJoin() {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            this.showError('Ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c server');
            return;
        }

        this.ws.send(JSON.stringify({
            type: 'quickJoin',
            gameType: 'flappy-race'
        }));
    }

    playerReady() {
    console.log('üéØ Player ready clicked');
    
    if (!this.gameId) {
        this.showError('Ch∆∞a v√†o ph√≤ng');
        return;
    }

    // G·ª≠i message ready l√™n server
    this.ws.send(JSON.stringify({
        type: 'ready',
        gameId: this.gameId
    }));

    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c (optimistic update)
    const readyBtn = document.getElementById('readyBtn');
    const readyStatus = document.getElementById('readyStatus');
    
    if (readyBtn) {
        readyBtn.disabled = true;
        readyBtn.textContent = '‚úÖ ƒê√£ s·∫µn s√†ng';
        readyBtn.className = 'btn btn-secondary btn-lg px-5';
    }
    
    if (readyStatus) {
        readyStatus.innerHTML = '<span class="ready-status">‚úÖ B·∫°n ƒë√£ s·∫µn s√†ng - Ch·ªù ng∆∞·ªùi kh√°c...</span>';
    }

    this.showSuccess('‚úÖ ƒê√£ b√°o s·∫µn s√†ng!');
}

    pauseGame() {
        if (!this.gameId) return;

        this.ws.send(JSON.stringify({
            type: 'gameAction',
            gameId: this.gameId,
            action: 'pause'
        }));
    }

    resetGame() {
        if (!this.gameId) return;

        if (confirm('üîÑ B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu v√°n m·ªõi kh√¥ng?')) {
            // Exit fullscreen
            this.exitFullscreenMode();
            
            this.ws.send(JSON.stringify({
                type: 'resetGame',
                gameId: this.gameId
            }));
        }
    }

    leaveGame() {
    console.log('üö™ Leave game button clicked');
    
    // KI·ªÇM TRA XEM C√ì ƒêANG TRONG GAME KH√îNG
    if (!this.gameId) {
        console.log('‚ö†Ô∏è No active game to leave');
        this.showError('‚ùå B·∫°n ch∆∞a tham gia ph√≤ng n√†o!');
        
        // ƒê·∫£m b·∫£o canvas v·∫´n hi·ªÉn th·ªã ƒë√∫ng
        this.ensureCanvasVisible();
        return;
    }

    console.log('üö™ Leaving game:', this.gameId);

    // 1. G·ª≠i message r·ªùi ph√≤ng l√™n server
    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
        console.log('üì§ Sending leave game message to server...');
        this.ws.send(JSON.stringify({
            type: 'leaveGame',
            gameId: this.gameId
        }));
    }

    // 2. Reset to√†n b·ªô tr·∫°ng th√°i game
    this.resetGameState();

    // 3. Hi·ªÉn th·ªã main menu v·ªõi canvas
    this.showMainMenuWithCanvas();

    // 4. Hi·ªÉn th·ªã th√¥ng b√°o
    this.showSuccess('üö™ ƒê√£ r·ªùi ph√≤ng th√†nh c√¥ng!');
}


resetGameState() {
    console.log('üîÑ Resetting game state...');
    
    // Reset t·∫•t c·∫£ bi·∫øn tr·∫°ng th√°i NH∆ØNG GI·ªÆ playerID cho connection
    this.gameId = null;
    this.playerColor = null;
    this.gameState = null;
    // KH√îNG reset this.playerId v√¨ c·∫ßn cho connection
    this.isHost = false;
    this.isSpectator = false;
    this.eventListenersActive = false;
    
    // Reset canvas camera
    if (this.camera) {
        this.camera.x = 0;
        this.camera.y = 0;
    }
    
    // Reset ready button
    this.resetReadyButton();
    
    // ƒê·∫£m b·∫£o tho√°t fullscreen
    this.exitFullscreenMode();
    
    console.log('‚úÖ Game state reset completed');
}


showMainMenuWithCanvas() {
    console.log('üè† Showing main menu with canvas...');
    
    // Hi·ªÉn th·ªã main menu
    const mainMenu = document.getElementById('mainMenu');
    const gameSetup = document.getElementById('gameSetup');
    const gameSection = document.getElementById('gameSection');
    
    // Force hi·ªÉn th·ªã main menu
    if (mainMenu) {
        mainMenu.style.display = 'block';
        mainMenu.classList.remove('hidden');
    }
    
    // ·∫®N game setup (lobby)
    if (gameSetup) {
        gameSetup.style.display = 'none';
        gameSetup.classList.add('hidden');
    }
    
    // HI·ªÇN TH·ªä gameSection ƒë·ªÉ c√≥ canvas, nh∆∞ng ·∫©n HUD
    if (gameSection) {
        gameSection.style.display = 'block';
        gameSection.classList.remove('hidden');
        
        // ·∫®n game HUD nh∆∞ng gi·ªØ canvas
        this.hideGameHUDOnly();
    }
    
    // ƒê·∫£m b·∫£o canvas ƒë∆∞·ª£c hi·ªÉn th·ªã v√† reset
    this.ensureCanvasVisible();
    
    // Clear game-specific UI elements
    this.clearGameUI();
}
hideGameHUDOnly() {
    console.log('üëÅÔ∏è Hiding only game HUD elements, keeping lobby...');
    
    // Ch·ªâ ·∫©n c√°c ph·∫ßn UI c·ªßa game, KH√îNG ·∫©n lobby
    const gameHudElements = [
        '.game-header',     // Header game khi ƒëang ch∆°i
        '.game-hud'         // HUD game khi ƒëang ch∆°i
    ];
    
    gameHudElements.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
            element.style.display = 'none';
        }
    });
    
    // ƒê·∫£m b·∫£o canvas container v·∫´n hi·ªÉn th·ªã
    const canvasContainer = document.querySelector('.flappy-canvas-container');
    if (canvasContainer) {
        canvasContainer.style.display = 'block';
        canvasContainer.style.visibility = 'visible';
    }
}
hideGameUIElements() {
    console.log('üëÅÔ∏è Hiding game UI elements while keeping canvas...');
    
    // ·∫®n c√°c ph·∫ßn UI game nh∆∞ng gi·ªØ canvas
    const elementsToHide = [
        '.game-header',
        '.game-hud',
        '#gameControls',
        '.game-status-section'
    ];
    
    elementsToHide.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
            element.style.display = 'none';
        }
    });
    
    // ƒê·∫£m b·∫£o canvas container v·∫´n hi·ªÉn th·ªã
    const canvasContainer = document.querySelector('.flappy-canvas-container');
    if (canvasContainer) {
        canvasContainer.style.display = 'block';
    }
}
ensureCanvasVisible() {
    console.log('üñºÔ∏è Ensuring canvas is visible...');
    
    // ƒê·∫£m b·∫£o gameSection ƒë∆∞·ª£c hi·ªÉn th·ªã
    const gameSection = document.getElementById('gameSection');
    if (gameSection) {
        gameSection.style.display = 'block';
        gameSection.classList.remove('hidden');
    }
    
    // ƒê·∫£m b·∫£o canvas container ƒë∆∞·ª£c hi·ªÉn th·ªã
    const canvasContainer = document.querySelector('.flappy-canvas-container');
    if (canvasContainer) {
        canvasContainer.style.display = 'block';
        canvasContainer.style.visibility = 'visible';
    }
    
    if (this.canvas) {
        // Reset canvas styles
        this.canvas.style.display = 'block';
        this.canvas.style.visibility = 'visible';
        this.canvas.style.position = 'relative';
        this.canvas.style.top = 'auto';
        this.canvas.style.left = 'auto';
        this.canvas.style.zIndex = 'auto';
        this.canvas.style.width = '100%';
        this.canvas.style.height = '400px';
        this.canvas.style.maxWidth = '800px';
        this.canvas.style.cursor = 'default';
        
        // Resize canvas
        this.resizeCanvas();
        
        // Clear canvas v√† v·∫Ω l·∫°i background tr·ªëng
        if (this.ctx) {
            this.ctx.fillStyle = '#87CEEB';
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
            
            // V·∫Ω text ch·ªù game
            this.ctx.fillStyle = '#FFFFFF';
            this.ctx.font = 'bold 24px Arial';
            this.ctx.textAlign = 'center';
            this.ctx.fillText('üéÆ Ch·ªçn ch·∫ø ƒë·ªô ch∆°i ·ªü tr√™n', this.canvas.width / 2, this.canvas.height / 2);
        }
    }
    
    console.log('‚úÖ Canvas visibility ensured');
}

clearGameUI() {
    console.log('üßπ Clearing game UI elements...');
    
    // Clear leaderboard DATA, kh√¥ng ·∫©n element
    const leaderboard = document.getElementById('leaderboard');
    if (leaderboard) {
        leaderboard.innerHTML = '<div class="text-muted small">Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng</div>';
    }
    
    // Clear players list DATA, kh√¥ng ·∫©n element  
    const playersList = document.getElementById('playersList');
    if (playersList) {
        playersList.innerHTML = '';
    }
    
    // Clear inventory DATA, kh√¥ng ·∫©n element
    const inventory = document.getElementById('playerInventory');
    if (inventory) {
        inventory.innerHTML = '<div class="text-muted small">Kh√¥ng c√≥ items</div>';
    }
    
    // Reset game info displays
    const gameId = document.getElementById('currentGameId');
    if (gameId) gameId.textContent = '-';
    
    const setupGameId = document.getElementById('setupGameId');
    if (setupGameId) setupGameId.textContent = '-';
    
    const gameStatus = document.getElementById('gameStatus');
    if (gameStatus) gameStatus.textContent = 'Ch∆∞a v√†o ph√≤ng';
    
    // Clear any countdown overlays
    const countdownOverlay = document.querySelector('.countdown-overlay');
    if (countdownOverlay) {
        countdownOverlay.remove();
    }
    
    console.log('‚úÖ Game UI data cleared');
}

    // UI management
showMainMenu() {
    const mainMenu = document.getElementById('mainMenu');
    const gameSection = document.getElementById('gameSection');
    
    if (mainMenu) mainMenu.style.display = 'block';
    if (gameSection) gameSection.style.display = 'none';
    
    // Reset game state
    this.gameId = null;
    this.playerId = null;
    this.playerColor = null;
}

 showGameSetupSection() {
    console.log('üéÆ Showing game setup section (lobby)...');
    
    const mainMenu = document.getElementById('mainMenu');
    const gameSetup = document.getElementById('gameSetup');
    const gameSection = document.getElementById('gameSection');
    
    // ·∫®n main menu
    if (mainMenu) {
        mainMenu.style.display = 'none';
        mainMenu.classList.add('hidden');
    }
    
    // HI·ªÇN TH·ªä game setup (lobby)
    if (gameSetup) {
        gameSetup.style.display = 'block';
        gameSetup.classList.remove('hidden');
    }
    
    // HI·ªÇN TH·ªä game section cho canvas
    if (gameSection) {
        gameSection.style.display = 'block';
        gameSection.classList.remove('hidden');
        
        // Hi·ªÉn th·ªã c√°c ph·∫ßn c·∫ßn thi·∫øt c·ªßa game section
        this.showLobbyElements();
    }
    
    // C·∫≠p nh·∫≠t game ID displays
    if (this.gameId) {
        const setupGameId = document.getElementById('setupGameId');
        const currentGameId = document.getElementById('currentGameId');
        
        if (setupGameId) setupGameId.textContent = this.gameId;
        if (currentGameId) currentGameId.textContent = this.gameId;
    }
    
    // ƒê·∫£m b·∫£o canvas hi·ªÉn th·ªã v·ªõi tr·∫°ng th√°i ch·ªù
    this.ensureCanvasVisible();
    
    console.log('‚úÖ Game setup section (lobby) displayed');
}
showLobbyElements() {
    console.log('üìã Showing lobby elements...');
    
    // Hi·ªÉn th·ªã canvas container
    const canvasContainer = document.querySelector('.flappy-canvas-container');
    if (canvasContainer) {
        canvasContainer.style.display = 'block';
        canvasContainer.style.visibility = 'visible';
    }
    
    // Hi·ªÉn th·ªã c√°c sidebar elements c·∫ßn thi·∫øt cho lobby
    const lobbyElements = [
        '#leaderboard',
        '.leaderboard-mini',
        '#playerInventory', 
        '.inventory-display'
    ];
    
    lobbyElements.forEach(selector => {
        const element = document.querySelector(selector);
        if (element && element.closest('.card')) {
            element.closest('.card').style.display = 'block';
        }
    });
    
    // ·∫®n game HUD elements
    const gameElements = [
        '.game-header',
        '.game-hud'
    ];
    
    gameElements.forEach(selector => {
        const element = document.querySelector(selector);
        if (element) {
            element.style.display = 'none';
        }
    });
}
updateUI() {
    if (!this.gameState) {
        console.log('‚ö†Ô∏è No game state to update UI');
        return;
    }

    console.log('üîÑ Updating UI, status:', this.gameState.status, 'phase:', this.gameState.gamePhase);

    // Update game info
    this.updateGameInfo();
    
    // LU√îN update players list v√† leaderboard
    this.updatePlayersList();
    
    if (this.gameState.leaderboard) {
        this.updateLeaderboard();
    }
    
    this.updatePlayerInventory();
    this.updatePlayerStatus();

    // Handle game states
    switch (this.gameState.status) {
        case 'setup':
            this.showGameSetupSection();
            break;
        case 'playing':
            if (this.gameState.gamePhase === 'countdown' || this.gameState.gamePhase === 'playing') {
                // N·∫øu ch∆∞a trong fullscreen th√¨ v√†o fullscreen
                if (!document.body.classList.contains('game-playing')) {
                    this.showGamePlaying();
                }
            } else if (this.gameState.gamePhase === 'finished') {
                // Round finished - exit fullscreen to show ready UI
                if (document.body.classList.contains('game-playing')) {
                    this.exitFullscreenMode();
                    this.showRoundResult({
                        winner: this.gameState.leaderboard?.[0]?.playerId,
                        leaderboard: this.gameState.leaderboard
                    });
                }
            }
            break;
        case 'finished':
            this.showGameResult();
            break;
    }
}

// THAY TH·∫æ FUNCTION showGamePlaying B·∫∞NG C√ÅI N√ÄY:

showGamePlaying() {
    console.log('üéÆ Showing game playing mode - new round');
    
    const mainMenu = document.getElementById('mainMenu');
    const gameSetup = document.getElementById('gameSetup');
    const gameSection = document.getElementById('gameSection');
    
    if (mainMenu) mainMenu.classList.add('hidden');
    if (gameSetup) gameSetup.classList.add('hidden');
    if (gameSection) gameSection.classList.remove('hidden');
    
    // V√†o fullscreen cho round m·ªõi
    setTimeout(() => {
        this.enterFullscreenMode();
        this.resizeCanvas();
    }, 200);
}

    enterFullscreenMode() {
        console.log('Entering fullscreen mode');
        
        // Add fullscreen class to body
        document.body.classList.add('game-playing');
        
        // Hide header/navbar
        const header = document.querySelector('nav, .navbar');
        if (header) {
            header.style.display = 'none';
        }
        
        // Add exit fullscreen button
        this.addExitFullscreenButton();
        
        // Prevent scrolling
        document.body.style.overflow = 'hidden';
        document.documentElement.style.overflow = 'hidden';
        
        // Force canvas visibility
        if (this.canvas) {
            this.canvas.style.display = 'block';
            this.canvas.style.visibility = 'visible';
        }
        
        // Resize canvas for fullscreen
        setTimeout(() => {
            this.resizeCanvasFullscreen();
        }, 100);
    }

    // C≈®NG THAY TH·∫æ FUNCTION exitFullscreenMode B·∫∞NG C√ÅI N√ÄY:

exitFullscreenMode() {
    console.log('üö™ Exiting fullscreen mode...');
    
    try {
        // Force remove fullscreen class
        document.body.classList.remove('game-playing');
        
        // Show navbar/header again with force
        const navbar = document.querySelector('.navbar, nav, header');
        if (navbar) {
            navbar.style.display = 'block';
            navbar.style.visibility = 'visible';
        }
        
        // Remove exit button
        const exitBtn = document.querySelector('.exit-fullscreen-btn');
        if (exitBtn) {
            exitBtn.remove();
        }
        
        // Restore scrolling
        document.body.style.overflow = 'auto';
        document.documentElement.style.overflow = 'auto';
        
        // Reset canvas styles completely
        if (this.canvas) {
            this.canvas.style.position = 'relative';
            this.canvas.style.top = 'auto';
            this.canvas.style.left = 'auto';
            this.canvas.style.zIndex = 'auto';
            this.canvas.style.width = '100%';
            this.canvas.style.height = '400px';
            this.canvas.style.maxWidth = '800px';
            this.canvas.style.cursor = 'default';
        }
        
        // Force show appropriate section
        const mainMenu = document.getElementById('mainMenu');
        const gameSetup = document.getElementById('gameSetup');
        const gameSection = document.getElementById('gameSection');
        
        if (mainMenu) mainMenu.style.display = 'block';
        if (gameSetup) gameSetup.classList.add('hidden');
        if (gameSection) gameSection.classList.add('hidden');
        
        // Resize canvas back to normal
        setTimeout(() => {
            this.resizeCanvas();
        }, 100);
        
        console.log('‚úÖ Fullscreen mode exited successfully');
        
    } catch (error) {
        console.error('‚ùå Error exiting fullscreen:', error);
    }
}

   addExitFullscreenButton() {
    // Remove existing button
    const existingBtn = document.querySelector('.exit-fullscreen-btn');
    if (existingBtn) {
        existingBtn.remove();
    }
    
    // Create exit button v·ªõi multiple exit methods
    const exitBtn = document.createElement('button');
    exitBtn.className = 'exit-fullscreen-btn';
    exitBtn.innerHTML = '‚ùå ESC: Tho√°t';
    exitBtn.style.cssText = `
        position: fixed !important;
        top: 20px !important;
        right: 20px !important;
        z-index: 99999 !important;
        background: rgba(231, 76, 60, 0.95) !important;
        color: white !important;
        border: 2px solid #fff !important;
        padding: 12px 20px !important;
        border-radius: 30px !important;
        cursor: pointer !important;
        font-weight: bold !important;
        font-size: 14px !important;
        backdrop-filter: blur(10px) !important;
        box-shadow: 0 4px 20px rgba(231, 76, 60, 0.4) !important;
        transition: all 0.3s ease !important;
        font-family: Arial, sans-serif !important;
        pointer-events: all !important;
    `;
    
    // MULTIPLE EXIT METHODS
    exitBtn.onclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('üñ±Ô∏è Exit button clicked');
        this.forceExitGame();
    };
    
    exitBtn.onmousedown = (e) => {
        e.preventDefault();
        e.stopPropagation();
    };
    
    exitBtn.ontouchstart = (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('üëÜ Exit button touched');
        this.forceExitGame();
    };
    
    // Double-click for emergency exit
    exitBtn.ondblclick = (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('üö® Double-click emergency exit');
        this.forceExitGame();
    };
    
    exitBtn.onmouseover = () => {
        exitBtn.style.background = 'rgba(231, 76, 60, 1) !important';
        exitBtn.style.transform = 'scale(1.05) !important';
        exitBtn.innerHTML = 'üö® CLICK: Tho√°t';
    };
    
    exitBtn.onmouseout = () => {
        exitBtn.style.background = 'rgba(231, 76, 60, 0.95) !important';
        exitBtn.style.transform = 'scale(1) !important';
        exitBtn.innerHTML = '‚ùå ESC: Tho√°t';
    };
    
    document.body.appendChild(exitBtn);
    
    console.log('‚úÖ Exit button added with multiple exit methods');
}

    showGameResult() {
        // Don't exit fullscreen immediately for round end
        if (this.gameState.status === 'finished') {
            // Game completely finished
            this.exitFullscreenMode();
            this.showSuccess('üèÅ Game ho√†n to√†n k·∫øt th√∫c!');
        } else {
            // Round finished, show respawn option but keep in fullscreen until user ready
            this.showSuccess('üèÜ Round k·∫øt th√∫c! Nh·∫•n ESC ƒë·ªÉ v·ªÅ lobby ho·∫∑c ch·ªù respawn...');
        }
    }

    handleRespawnStarted() {
        console.log('Respawn started - going back to game');
        
        // Go directly back to fullscreen game mode
        const gameSetup = document.getElementById('gameSetup');
        const gameSection = document.getElementById('gameSection');
        
        if (gameSetup) gameSetup.classList.add('hidden');
        if (gameSection) gameSection.classList.remove('hidden');
        
        // Enter fullscreen for new round
        setTimeout(() => {
            this.enterFullscreenMode();
            this.resizeCanvas();
        }, 500);
    }

    showRespawnButton() {
        console.log('Showing respawn button');
        
        // Exit fullscreen to show respawn UI
        this.exitFullscreenMode();
        
        // Show game section with respawn button
        const gameSetup = document.getElementById('gameSetup');
        const gameSection = document.getElementById('gameSection');
        
        if (gameSetup) gameSetup.classList.add('hidden');
        if (gameSection) gameSection.classList.remove('hidden');
        
        // Enable and show ready button for respawn
        const readyBtn = document.getElementById('readyBtn');
        const readyStatus = document.getElementById('readyStatus');
        
        if (readyBtn) {
            readyBtn.disabled = false;
            readyBtn.textContent = 'üîÑ S·∫µn s√†ng chi·∫øn ƒë·∫•u l·∫°i!';
            readyBtn.className = 'btn btn-warning btn-lg px-5'; // Change color for respawn
            readyBtn.style.display = 'inline-block'; // Make sure it's visible
        }
        
        if (readyStatus) {
            readyStatus.innerHTML = '<span class="not-ready-status">Ch∆∞a s·∫µn s√†ng cho round m·ªõi</span>';
        }
        
        // Show respawn section in game setup area
        this.showRespawnSection();
    }

    showRespawnSection() {
        const gameSetup = document.getElementById('gameSetup');
        if (!gameSetup) return;
        
        gameSetup.classList.remove('hidden');
        
        // Update the lobby title
        const lobbyTitle = gameSetup.querySelector('.card-header h4');
        if (lobbyTitle) {
            lobbyTitle.textContent = 'üîÑ Round K·∫øt Th√∫c - S·∫µn S√†ng Ti·∫øp T·ª•c?';
        }
    }

    resetReadyButton() {
    console.log('üîÑ Resetting ready button for new round');
    
    const readyBtn = document.getElementById('readyBtn');
    const readyStatus = document.getElementById('readyStatus');
    
    if (readyBtn) {
        readyBtn.disabled = false;
        readyBtn.textContent = '‚úÖ S·∫µn s√†ng chi·∫øn ƒë·∫•u!';
        readyBtn.className = 'btn btn-success btn-lg px-5';
    }
    
    if (readyStatus) {
        readyStatus.innerHTML = '<span class="not-ready-status">‚è≥ Ch∆∞a s·∫µn s√†ng</span>';
    }
    
    // Reset lobby title v·ªÅ b√¨nh th∆∞·ªùng
    const lobbyTitle = document.querySelector('#gameSetup .card-header h4');
    if (lobbyTitle) {
        lobbyTitle.textContent = 'üéÆ Lobby Game';
    }
}

    updateGameInfo() {
        if (!this.gameState) return;
        
        // Update game info display
        if (this.gameState.settings) {
            const settings = this.gameState.settings;
            
            const currentGameMode = document.getElementById('currentGameMode');
            const currentMap = document.getElementById('currentMap');
            const currentDifficulty = document.getElementById('currentDifficulty');
            
            if (currentGameMode) currentGameMode.textContent = this.getModeName(settings.mode);
            if (currentMap) currentMap.textContent = this.getMapName(settings.mapType);
            if (currentDifficulty) currentDifficulty.textContent = this.getDifficultyName(settings.difficulty);
        }
        
        // Update players list
        this.updatePlayersList();
    }

   updatePlayersList() {
    const playersListEl = document.getElementById('playersList');
    if (!playersListEl) {
        console.log('‚ùå Players list element not found');
        return;
    }
    
    console.log('üîÑ Updating players list');
    
    // S·ª≠ d·ª•ng players ho·∫∑c playerStates
    const playersData = this.gameState.players || this.gameState.playerStates || [];
    console.log('Players data:', playersData);
    
    if (playersData.length === 0) {
        playersListEl.innerHTML = '<div class="text-muted small">Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i</div>';
        return;
    }
    
    playersListEl.innerHTML = '';
    
    playersData.forEach((player, index) => {
        const playerItem = document.createElement('div');
        playerItem.className = 'player-item d-flex justify-content-between align-items-center p-2 mb-2 rounded';
        
        const isMe = player.playerId === this.playerId;
        const isReady = this.gameState.playersReady && this.gameState.playersReady[player.playerId];
        
        // M√†u n·ªÅn kh√°c nhau cho player ƒë√£ ready
        if (isReady) {
            playerItem.style.background = 'rgba(40, 167, 69, 0.2)';
        } else {
            playerItem.style.background = 'rgba(108, 117, 125, 0.2)';
        }
        
        if (isMe) {
            playerItem.style.border = '2px solid #007bff';
        }
        
        // Hi·ªÉn th·ªã t√™n v√† score n·∫øu c√≥
        const playerName = isMe ? 'üë§ B·∫°n' : `üéÆ Player ${index + 1}`;
        const playerScore = player.score ? ` (${player.score} ƒëi·ªÉm)` : '';
        
        playerItem.innerHTML = `
            <div class="player-info">
                <div class="player-name">
                    ${playerName}${playerScore}
                </div>
                <small class="text-muted">ID: ${player.playerId.slice(-4)}</small>
            </div>
            <div class="player-status">
                ${isReady ? 
                    '<span class="badge bg-success">‚úÖ S·∫µn s√†ng</span>' : 
                    '<span class="badge bg-secondary">‚è≥ Ch·ªù...</span>'
                }
            </div>
        `;
        
        playersListEl.appendChild(playerItem);
    });
    
    console.log(`‚úÖ Updated players list with ${playersData.length} players`);
}

updateLeaderboard() {
    const leaderboardEl = document.getElementById('leaderboard');
    if (!leaderboardEl) {
        console.log('‚ùå Leaderboard element not found with ID: leaderboard');
        return;
    }
    
    // Fallback: T·∫°o leaderboard t·ª´ playerStates n·∫øu kh√¥ng c√≥ leaderboard data
    let leaderboardData = this.gameState.leaderboard;
    if (!leaderboardData && this.gameState.playerStates) {
        console.log('üìä Creating leaderboard from playerStates');
        leaderboardData = this.gameState.playerStates
            .filter(p => p.alive || p.phase === 'finished')
            .sort((a, b) => (b.score || 0) - (a.score || 0))
            .map(p => ({ playerId: p.playerId, score: p.score || 0 }));
    }
    
    if (!leaderboardData || leaderboardData.length === 0) {
        leaderboardEl.innerHTML = '<div class="text-muted small">Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng</div>';
        return;
    }
    
    console.log('üìä Updating leaderboard with', leaderboardData.length, 'entries');
    
    leaderboardEl.innerHTML = '';
    
    leaderboardData.forEach((entry, index) => {
        const item = document.createElement('div');
        item.className = 'leaderboard-item';
        
        if (entry.playerId === this.playerId) {
            item.classList.add('me');
        }
        
        // ===== D√íNG ƒê√É S·ª¨A - HI·ªÇN TH·ªä ƒê·∫¶Y ƒê·ª¶ TH√îNG TIN =====
        item.innerHTML = `
            <span>${index + 1}. P${entry.playerId.slice(-2)}</span>
            <span>${entry.score || 0}</span>
        `;
        
        leaderboardEl.appendChild(item);
    });
}

    updatePlayerInventory() {
        const inventoryEl = document.getElementById('playerInventory');
        if (!inventoryEl) return;
        
        const myPlayer = this.getMyPlayer();
        if (!myPlayer || !myPlayer.items || myPlayer.items.length === 0) {
            inventoryEl.innerHTML = '<div class="text-muted small">Kh√¥ng c√≥ items</div>';
            return;
        }
        
        inventoryEl.innerHTML = '';
        
        myPlayer.items.forEach((item, index) => {
            const itemEl = document.createElement('div');
            itemEl.className = 'inventory-item';
            itemEl.innerHTML = `
                ${this.getItemIcon(item)}
                <div class="hotkey">${index + 1}</div>
            `;
            inventoryEl.appendChild(itemEl);
        });
    }

    updatePlayerStatus() {
        const myPlayer = this.getMyPlayer();
        if (!myPlayer) return;
        
        const livesEl = document.getElementById('playerLives');
        const scoreEl = document.getElementById('playerScore');
        
        if (livesEl) livesEl.textContent = myPlayer.lives || 3;
        if (scoreEl) scoreEl.textContent = myPlayer.score || 0;
    }

updateReadyStatus(playersReady) {
    console.log('üîÑ Updating ready status:', playersReady);
    
    const readyCount = Object.keys(playersReady || {}).length;
    const totalPlayers = this.gameState?.players?.length || 0;
    
    const statusEl = document.getElementById('readyStatus');
    if (statusEl) {
        if (readyCount === 0) {
            statusEl.innerHTML = '<span class="not-ready-status">‚è≥ Ch·ªù ng∆∞·ªùi ch∆°i s·∫µn s√†ng...</span>';
        } else if (readyCount < totalPlayers) {
            statusEl.innerHTML = `<span class="ready-status">‚è≥ ${readyCount}/${totalPlayers} ng∆∞·ªùi ch∆°i s·∫µn s√†ng cho round m·ªõi...</span>`;
        } else {
            statusEl.innerHTML = '<span class="ready-status">üéÆ T·∫•t c·∫£ ƒë√£ s·∫µn s√†ng! B·∫Øt ƒë·∫ßu round m·ªõi...</span>';
        }
    }
    
    // C·∫≠p nh·∫≠t n√∫t ready c·ªßa b·∫£n th√¢n
    const readyBtn = document.getElementById('readyBtn');
    if (readyBtn && this.playerId && playersReady[this.playerId]) {
        readyBtn.disabled = true;
        readyBtn.textContent = '‚úÖ ƒê√£ s·∫µn s√†ng';
        readyBtn.className = 'btn btn-secondary btn-lg px-5';
    }
}

    getModeName(mode) {
        const modes = {
            'classic': 'Classic Race',
            'battle': 'Battle Royale',
            'time': 'Time Trial',
            'endless': 'Endless Mode'
        };
        return modes[mode] || mode;
    }

    getMapName(mapType) {
        const maps = {
            'classic': 'Classic',
            'jungle': 'Jungle',
            'city': 'City',
            'space': 'Space'
        };
        return maps[mapType] || mapType;
    }

    getDifficultyName(difficulty) {
        const difficulties = {
            'easy': 'D·ªÖ',
            'normal': 'B√¨nh th∆∞·ªùng',
            'hard': 'Kh√≥',
            'extreme': 'C·ª±c kh√≥'
        };
        return difficulties[difficulty] || difficulty;
    }

    copyGameId() {
        if (this.gameId) {
            navigator.clipboard.writeText(this.gameId).then(() => {
                this.showSuccess('ƒê√£ copy m√£ ph√≤ng!');
            }).catch(() => {
                // Fallback for older browsers
                const textArea = document.createElement('textarea');
                textArea.value = this.gameId;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                this.showSuccess('ƒê√£ copy m√£ ph√≤ng!');
            });
        }
    }

    showError(message) {
        const statusEl = document.getElementById('gameStatus');
        if (statusEl) {
            statusEl.innerHTML = `<div class="error-message">‚ùå ${message}</div>`;
            setTimeout(() => {
                statusEl.innerHTML = 'ƒêang ch·ªù...';
            }, 3000);
        } else {
            alert(message);
        }
    }

    showSuccess(message) {
        const statusEl = document.getElementById('gameStatus');
        if (statusEl) {
            statusEl.innerHTML = `<div class="success-message">‚úÖ ${message}</div>`;
        } else {
            console.log(message);
        }
    }
}

// Global functions for HTML onclick events
let flappyGame;

function createGame() {
    if (flappyGame) {
        flappyGame.createGame();
    }
}




function joinGame() {
    if (flappyGame) {
        flappyGame.joinGame();
    }
}

function showQuickJoin() {
    if (flappyGame) {
        flappyGame.showQuickJoin();
    }
}

function playerReady() {
    if (flappyGame) {
        flappyGame.playerReady();
    }
}

function copyGameId() {
    if (flappyGame) {
        flappyGame.copyGameId();
    }
}
// Th√™m v√†o file flappy-race.js ho·∫∑c file JS t∆∞∆°ng ·ª©ng

// Copy Game ID v·ªõi validation


// Copy t·ª´ setup section
function copyGameIdFromSetup() {
    copyGameId();
}

// C·∫£i thi·ªán join game function
function joinGame() {
    const gameIdInput = document.getElementById('gameIdInput');
    if (!gameIdInput) {
        console.error('Kh√¥ng t√¨m th·∫•y input field');
        return;
    }
    
    // Trim v√† clean input
    const gameId = gameIdInput.value.trim().toLowerCase();
    console.log('üéÆ Attempting to join game:', gameId);
    
    if (!gameId) {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ph√≤ng!');
        gameIdInput.focus();
        return;
    }
    
    // Validate format (optional)
    // if (!gameId.includes('flappy-race_')) {
    //     if (confirm('ü§î M√£ ph√≤ng c√≥ v·∫ª kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c?')) {
    //         // Continue
    //     } else {
    //         return;
    //     }
    // }
    
    // Check WebSocket connection
    if (!window.game || !window.game.ws || window.game.ws.readyState !== WebSocket.OPEN) {
        alert('‚ùå Ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c server. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
        
        // Try to reconnect
        if (window.game && window.game.connectWebSocket) {
            window.game.connectWebSocket();
        }
        return;
    }
    
    // Send join request
    try {
        window.game.ws.send(JSON.stringify({
            type: 'joinGame',
            gameId: gameId,
            gameType: 'flappy-race'
        }));
        
        console.log('üì§ Join request sent for game:', gameId);
        
        // Show loading state
        const joinBtn = document.querySelector('button[onclick="joinGame()"]');
        if (joinBtn) {
            const originalText = joinBtn.innerHTML;
            joinBtn.innerHTML = '‚è≥ ƒêang v√†o ph√≤ng...';
            joinBtn.disabled = true;
            
            // Reset button after 5 seconds if no response
            setTimeout(() => {
                if (joinBtn.disabled) {
                    joinBtn.innerHTML = originalText;
                    joinBtn.disabled = false;
                }
            }, 5000);
        }
        
    } catch (error) {
        console.error('‚ùå Error sending join request:', error);
        alert('‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu v√†o ph√≤ng');
    }
}

// Debug function ƒë·ªÉ check available games
function checkAvailableGames() {
    if (!window.game || !window.game.ws || window.game.ws.readyState !== WebSocket.OPEN) {
        console.log('‚ùå WebSocket not connected');
        return;
    }
    
    window.game.ws.send(JSON.stringify({
        type: 'listGames',
        gameType: 'flappy-race'
    }));
    
    console.log('üì§ Requested list of available games');
}
function pauseGame() {
    if (flappyGame) {
        flappyGame.pauseGame();
    }
}

function resetGame() {
    if (flappyGame) {
        flappyGame.resetGame();
    }
}

function leaveGame() {
    if (flappyGame) {
        flappyGame.leaveGame();
    }
}

// Initialize game when page loads
document.addEventListener('DOMContentLoaded', () => {
    console.log('Initializing Flappy Race Game...');
    flappyGame = new FlappyRaceClient();
});

// ===== FIX FOR FLAPPY RACE CONNECTION ISSUES =====

// 1. Fix global variable initialization - th√™m v√†o cu·ªëi file flappy-race.js
window.flappyGame = null;

// 2. Fix the DOMContentLoaded event
document.addEventListener('DOMContentLoaded', () => {
    console.log('Initializing Flappy Race Game...');
    window.flappyGame = new FlappyRaceClient();
    
    // Make it globally accessible
    window.game = window.flappyGame;
});

// 3. Fix the joinGame function - thay th·∫ø function joinGame() c≈©
function joinGame() {
    const gameIdInput = document.getElementById('gameIdInput');
    if (!gameIdInput) {
        console.error('Kh√¥ng t√¨m th·∫•y input field');
        return;
    }
    
    // Trim v√† clean input
    const gameId = gameIdInput.value.trim().toLowerCase();
    console.log('üéÆ Attempting to join game:', gameId);
    
    if (!gameId) {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ph√≤ng!');
        gameIdInput.focus();
        return;
    }
    
    // Validate format - B·ªé VALIDATION NGHI√äM NG·∫∂T
    // if (!gameId.includes('flappy-race') && !gameId.includes('6430')) {
    //     if (!confirm('ü§î M√£ ph√≤ng c√≥ v·∫ª kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. B·∫°n c√≥ ch·∫Øc mu·ªën ti·∫øp t·ª•c?')) {
    //         return;
    //     }
    // }
    
    // Check WebSocket connection - FIX ƒê√öNG BI·∫æN
    if (!window.flappyGame || !window.flappyGame.ws || window.flappyGame.ws.readyState !== WebSocket.OPEN) {
        alert('‚ùå Ch∆∞a k·∫øt n·ªëi ƒë∆∞·ª£c server. ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');
        
        // Try to reconnect
        if (window.flappyGame && window.flappyGame.connectWebSocket) {
            window.flappyGame.connectWebSocket();
        }
        return;
    }
    
    // Send join request - ƒê√öNG SYNTAX
    try {
        window.flappyGame.ws.send(JSON.stringify({
            type: 'joinGame',
            gameId: gameId,
            gameType: 'flappy-race'
        }));
        
        console.log('üì§ Join request sent for game:', gameId);
        
        // Show loading state
        const joinBtn = document.querySelector('button[onclick="joinGame()"]');
        if (joinBtn) {
            const originalText = joinBtn.innerHTML;
            joinBtn.innerHTML = '‚è≥ ƒêang v√†o ph√≤ng...';
            joinBtn.disabled = true;
            
            // Reset button after 5 seconds if no response
            setTimeout(() => {
                if (joinBtn.disabled) {
                    joinBtn.innerHTML = originalText;
                    joinBtn.disabled = false;
                }
            }, 5000);
        }
        
    } catch (error) {
        console.error('‚ùå Error sending join request:', error);
        alert('‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu v√†o ph√≤ng');
    }
}

// 4. Fix other global functions
function createGame() {
    if (window.flappyGame) {
        window.flappyGame.createGame();
    } else {
        alert('Game ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!');
    }
}

function showQuickJoin() {
    if (window.flappyGame) {
        window.flappyGame.showQuickJoin();
    }
}

function playerReady() {
    if (window.flappyGame) {
        window.flappyGame.playerReady();
    }
}

function copyGameId() {
    if (window.flappyGame) {
        window.flappyGame.copyGameId();
    }
}

function pauseGame() {
    if (window.flappyGame) {
        window.flappyGame.pauseGame();
    }
}

function resetGame() {
    if (window.flappyGame) {
        window.flappyGame.resetGame();
    }
}

function leaveGame() {
    if (window.flappyGame) {
        window.flappyGame.leaveGame();
    }
}

// 5. Debug functions
function debugConnection() {
    console.log('=== FLAPPY RACE DEBUG ===');
    console.log('flappyGame instance:', window.flappyGame);
    console.log('WebSocket state:', window.flappyGame?.ws?.readyState);
    console.log('Connected:', window.flappyGame?.ws?.readyState === WebSocket.OPEN);
    console.log('Game ID:', window.flappyGame?.gameId);
    console.log('Player ID:', window.flappyGame?.playerId);
}

function listAvailableGames() {
    if (!window.flappyGame || !window.flappyGame.ws) {
        console.log('‚ùå No connection');
        return;
    }
    
    window.flappyGame.ws.send(JSON.stringify({
        type: 'listGames',
        gameType: 'flappy-race'
    }));
    
    console.log('üì§ Requested list of available games');
}

// 6. Test connection with better error handling
function testGameConnection() {
    console.log('üîß Testing game connection...');
    
    // Check if instance exists
    if (!window.flappyGame) {
        console.error('‚ùå flappyGame instance not found');
        return false;
    }
    
    // Check WebSocket
    const ws = window.flappyGame.ws;
    if (!ws) {
        console.error('‚ùå WebSocket not initialized');
        return false;
    }
    
    // Check connection state
    const states = {
        0: 'CONNECTING',
        1: 'OPEN',
        2: 'CLOSING', 
        3: 'CLOSED'
    };
    
    console.log(`üì° WebSocket state: ${states[ws.readyState]} (${ws.readyState})`);
    
    if (ws.readyState === WebSocket.OPEN) {
        console.log('‚úÖ Connection is ready!');
        return true;
    } else {
        console.log('‚ùå Connection not ready');
        return false;
    }
}

// 7. Auto-reconnect function  
function forceReconnect() {
    console.log('üîÑ Force reconnecting...');
    
    if (window.flappyGame) {
        if (window.flappyGame.ws) {
            window.flappyGame.ws.close();
        }
        window.flappyGame.connectWebSocket();
    }
}

console.log('üîß Flappy Race fixes loaded! Use debugConnection() to check status.');








function hideCountdownOverlay() {
    const overlay = document.querySelector('.countdown-overlay');
    if (overlay) {
        overlay.style.animation = 'fadeOut 0.5s ease-out forwards';
        setTimeout(() => overlay.remove(), 500);
    }
}

// DEBUG FUNCTIONS - for troubleshooting
function debugGameState() {
    console.log('=== GAME STATE DEBUG ===');
    console.log('Game Phase:', window.flappyGame?.gameState?.gamePhase);
    console.log('Game Status:', window.flappyGame?.gameState?.status);
    console.log('Game Timer:', window.flappyGame?.gameState?.gameTimer);
    console.log('My Player:', window.flappyGame?.getMyPlayer?.());
    console.log('All Players:', window.flappyGame?.gameState?.players);
}

function forceExitFullscreen() {
    console.log('üîß Force exiting fullscreen...');
    document.body.classList.remove('game-playing');
    document.body.style.overflow = 'auto';
    document.documentElement.style.overflow = 'auto';
    
    const exitBtn = document.querySelector('.exit-fullscreen-btn');
    if (exitBtn) exitBtn.remove();
    
    const navbar = document.querySelector('.navbar, nav');
    if (navbar) navbar.style.display = 'block';
    
    console.log('‚úÖ Force exit completed');
}
window.debugExitIssue = () => {
    console.log('=== EXIT DEBUG INFO ===');
    console.log('Game instance:', window.flappyGame);
    console.log('Game state:', window.flappyGame?.gameState);
    console.log('Body classes:', document.body.className);
    console.log('Exit button:', document.querySelector('.exit-fullscreen-btn'));
    console.log('Event listeners active:', window.flappyGame?.eventListenersActive);
};
window.emergencyExitGame = () => {
    console.log('üö® EMERGENCY EXIT FROM CONSOLE');
    if (window.flappyGame) {
        window.flappyGame.forceExitGame();
    } else {
        document.body.classList.remove('game-playing');
        document.body.style.overflow = 'auto';
        window.location.reload();
    }
};
window.debugReadyState = () => {
    console.log('=== READY STATE DEBUG ===');
    console.log('Game ID:', window.flappyGame?.gameId);
    console.log('Player ID:', window.flappyGame?.playerId);
    console.log('Game State:', window.flappyGame?.gameState);
    console.log('Players Ready:', window.flappyGame?.gameState?.playersReady);
    console.log('Players List:', window.flappyGame?.gameState?.players);
    
    const readyBtn = document.getElementById('readyBtn');
    const readyStatus = document.getElementById('readyStatus');
    const playersList = document.getElementById('playersList');
    
    console.log('Ready Button:', readyBtn ? { disabled: readyBtn.disabled, text: readyBtn.textContent } : 'Not found');
    console.log('Ready Status:', readyStatus ? readyStatus.innerHTML : 'Not found');
    console.log('Players List HTML:', playersList ? playersList.innerHTML : 'Not found');
};

window.debugLeaveRoom = () => {
    console.log('=== LEAVE ROOM DEBUG ===');
    console.log('Game ID:', window.flappyGame?.gameId);
    console.log('Player ID:', window.flappyGame?.playerId);
    console.log('Game State:', window.flappyGame?.gameState);
    console.log('Canvas visible:', window.flappyGame?.canvas?.style.display);
    console.log('Main menu display:', document.getElementById('mainMenu')?.style.display);
    console.log('Game setup display:', document.getElementById('gameSetup')?.style.display);
    console.log('Game section display:', document.getElementById('gameSection')?.style.display);
};

window.forceShowCanvas = () => {
    console.log('üîß Force showing canvas...');
    if (window.flappyGame) {
        window.flappyGame.ensureCanvasVisible();
        window.flappyGame.showMainMenuWithCanvas();
    }
};
window.debugGameState = () => {
    console.log('=== GAME STATE DEBUG ===');
    console.log('Has Game ID:', window.flappyGame?.hasActiveGame());
    console.log('Is In Game:', window.flappyGame?.isInGame());
    console.log('Game ID:', window.flappyGame?.gameId);
    console.log('Game State:', window.flappyGame?.gameState);
    console.log('Canvas Display:', window.flappyGame?.canvas?.style.display);
    console.log('GameSection Display:', document.getElementById('gameSection')?.style.display);
    console.log('MainMenu Display:', document.getElementById('mainMenu')?.style.display);
};

window.forceFixCanvas = () => {
    console.log('üîß Force fixing canvas...');
    if (window.flappyGame) {
        window.flappyGame.ensureCanvasVisible();
        window.flappyGame.showMainMenuWithCanvas();
        console.log('‚úÖ Canvas force fixed');
    }
};

window.resetToMainMenu = () => {
    console.log('üîÑ Resetting to main menu...');
    if (window.flappyGame) {
        window.flappyGame.resetGameState();
        window.flappyGame.showMainMenuWithCanvas();
        console.log('‚úÖ Reset to main menu completed');
    }
};
window.debugLobbyDisplay = () => {
    console.log('=== LOBBY DISPLAY DEBUG ===');
    console.log('Game ID:', window.flappyGame?.gameId);
    console.log('Is Host:', window.flappyGame?.isHost);
    console.log('MainMenu display:', document.getElementById('mainMenu')?.style.display);
    console.log('GameSetup display:', document.getElementById('gameSetup')?.style.display);
    console.log('GameSection display:', document.getElementById('gameSection')?.style.display);
    console.log('Canvas display:', window.flappyGame?.canvas?.style.display);
    
    const lobbyElements = ['#playersList', '#leaderboard', '#currentGameId', '#setupGameId'];
    lobbyElements.forEach(selector => {
        const el = document.querySelector(selector);
        console.log(`${selector}:`, el ? 'exists' : 'missing', el?.style.display);
    });
};

window.forceShowLobby = () => {
    console.log('üîß Force showing lobby...');
    if (window.flappyGame) {
        window.flappyGame.ensureLobbyVisible();
        window.flappyGame.updateGameInfo();
        console.log('‚úÖ Lobby force shown');
    }
};

console.log('üîß Lobby display fixes loaded!');
console.log('üí° Debug commands:');
console.log('- debugLobbyDisplay() - Check lobby display state');
console.log('- forceShowLobby() - Force show lobby elements');
console.log('üîß Leave room safety fixes loaded!');
console.log('üí° Debug commands:');
console.log('- debugGameState() - Check current state');
console.log('- forceFixCanvas() - Force fix canvas display');
console.log('- resetToMainMenu() - Reset to main menu safely');
console.log('üîß Exit game fixes loaded!');
console.log('üí° If stuck, run: emergencyExitGame() in console');
console.log('üîç Debug with: debugExitIssue()');
console.log('üîß Debug functions loaded! Use debugGameState() and forceExitFullscreen() in console.');
// 10. APPLY FIXES
console.log('üîß Flappy Race Gameplay Fixes loaded!');
console.log('üìù To apply fixes:');
console.log('1. Replace handleMessage case "gameState" with fixed version');
console.log('2. Replace setupEventListeners with setupEventListenersFixed');
console.log('3. Replace exitFullscreenMode with exitFullscreenModeFixed');
console.log('4. Replace addExitFullscreenButton with addExitFullscreenButtonFixed');
console.log('');
console.log('üéÆ Debug commands:');
console.log('- debugGameState() - Check current game state');
console.log('- forceExitFullscreen() - Force exit if stuck');
console.log('- forceRespawnPlayer() - Force respawn if stuck');